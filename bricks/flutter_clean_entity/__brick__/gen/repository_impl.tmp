import 'package:${projectName}/core/arch/data/remote/base/map_common_server_error.dart';
import 'package:${projectName}/core/arch/domain/entity/common/result.dart';
import 'package:${projectName}/core/arch/domain/entity/failure/api_failure.dart';
import 'package:${projectName}/core/di/app.dart';
import 'package:${projectName}/data/source/remote/${sourceName.snakeCase}/${sourceName.snakeCase}_source.dart';
import 'package:${projectName}/domain/repository/${sourceName.snakeCase}_repository.dart';
import 'package:new_project/core/arch/domain/entity/common/operation_status.dart';
//{entities_imports}
//{mappers_imports}

class ${sourceName.pascalCase}RepositoryImpl extends ${sourceName.pascalCase}Repository {
  final ${sourceName.pascalCase}Source _${sourceName.snakeCase}Source;

  //{mappers}

  ${sourceName.pascalCase}RepositoryImpl(
    this._${sourceName.snakeCase}Source,
  );
  
  @override
  Future<Result<${className.pascalCase}>> get${className.pascalCase}() async {
    try {
      final response = await _${sourceName.snakeCase}Source.get${className.pascalCase}();
      if (response.isSuccess()) {
        final entities = _${className.camelCase}Mappers.map${className.pascalCase}ResponseToEntity(response.data);
        return Result.success(entities);
      } else {
        final failure = MapCommonServerError.getServerFailureDetails(response);
        return Result.error(failure: failure);
      }
    } catch (e, trace) {
      logger.e('get${className.pascalCase}_API_ERR', e, trace);
      //TODO make repository failure
      return Result.error(
        failure: ApiFailure(
          ServerFailure.exception,
          message: e.toString(),
        ),
      );
    }
  }

  @override
  Future<Result<OperationStatus>> post${className.pascalCase}(${className.pascalCase} ${className.camelCase}) async {
    try {
      final response = await _${sourceName.snakeCase}Source.post${className.pascalCase}(_${className.camelCase}Mappers.map${className.pascalCase}EntityToRequest(${className.camelCase}));
      if (response.isSuccess()) {
        return const Result.success(OperationStatus.success);
      } else {
        final failure = MapCommonServerError.getServerFailureDetails(response);
        return Result.error(failure: failure);
      }
    } catch (e, trace) {
      logger.e('postUser_API_ERR', e, trace);
      //TODO make repository failure
      return Result.error(
        failure: ApiFailure(
          ServerFailure.exception,
          message: e.toString(),
        ),
      );
    }
  }
}